{"ast":null,"code":"var _jsxFileName = \"/Users/duc/Dropbox/Projects/Web/cryo-web-monitor/src/client/Graphs.js\";\nimport React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\nexport default class Graphs extends Component {\n  constructor(props) {\n    super(props);\n\n    this.setData = () => {\n      var temp = { ...this.state.line1\n      };\n      temp.x = this.props.x;\n      this.setState({\n        someProperty\n      });\n      const {\n        line1\n      } = this.state;\n      line1.x = this.props.coord.x;\n      line1.y = this.props.coord.y;\n      this.setState({\n        revision: this.state.revision + 1\n      });\n    };\n\n    this.state = {\n      response: true,\n      revision: 0,\n      line1: {\n        x: this.props.coord.x,\n        y: this.props.coord.y,\n        name: 'Line 1',\n        mode: \"markers\",\n        type: \"scatter\"\n      },\n      layout: {\n        title: \"Title Loading\",\n        xaxis: {\n          type: \"date\" //range: [],\n          //tickformat: '%H:%M'\n\n        } //autosize: false,\n        //height: 300,\n\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }\n    }, this.state.response ? /*#__PURE__*/React.createElement(Plot, {\n      revision: this.state.revision,\n      data: [this.state.line1],\n      layout: this.state.layout,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }\n    }) : /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \"Loading...\"));\n  }\n\n}","map":{"version":3,"sources":["/Users/duc/Dropbox/Projects/Web/cryo-web-monitor/src/client/Graphs.js"],"names":["React","Component","Plot","Graphs","constructor","props","setData","temp","state","line1","x","setState","someProperty","coord","y","revision","response","name","mode","type","layout","title","xaxis","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,iBAAjB;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAC5CG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAyBnBC,OAzBmB,GAyBT,MAAO;AACf,UAAIC,IAAI,GAAG,EAAC,GAAG,KAAKC,KAAL,CAAWC;AAAf,OAAX;AACAF,MAAAA,IAAI,CAACG,CAAL,GAAS,KAAKL,KAAL,CAAWK,CAApB;AACA,WAAKC,QAAL,CAAc;AAACC,QAAAA;AAAD,OAAd;AAGA,YAAM;AAAEH,QAAAA;AAAF,UAAW,KAAKD,KAAtB;AACAC,MAAAA,KAAK,CAACC,CAAN,GAAU,KAAKL,KAAL,CAAWQ,KAAX,CAAiBH,CAA3B;AACAD,MAAAA,KAAK,CAACK,CAAN,GAAU,KAAKT,KAAL,CAAWQ,KAAX,CAAiBC,CAA3B;AACA,WAAKH,QAAL,CAAc;AACZI,QAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWO,QAAX,GAAsB;AADpB,OAAd;AAID,KAtCkB;;AAEjB,SAAKP,KAAL,GAAa;AACXQ,MAAAA,QAAQ,EAAE,IADC;AAEXD,MAAAA,QAAQ,EAAE,CAFC;AAGXN,MAAAA,KAAK,EAAE;AACLC,QAAAA,CAAC,EAAE,KAAKL,KAAL,CAAWQ,KAAX,CAAiBH,CADf;AAELI,QAAAA,CAAC,EAAE,KAAKT,KAAL,CAAWQ,KAAX,CAAiBC,CAFf;AAGLG,QAAAA,IAAI,EAAE,QAHD;AAILC,QAAAA,IAAI,EAAE,SAJD;AAKLC,QAAAA,IAAI,EAAE;AALD,OAHI;AAUXC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,eADD;AAENC,QAAAA,KAAK,EAAE;AACLH,UAAAA,IAAI,EAAE,MADD,CAEL;AACA;;AAHK,SAFD,CAON;AACA;;AARM;AAVG,KAAb;AAqBD;;AAiBDI,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKf,KAAL,CAAWQ,QAAX,gBACC,oBAAC,IAAD;AACE,MAAA,QAAQ,EAAE,KAAKR,KAAL,CAAWO,QADvB;AAEE,MAAA,IAAI,EAAE,CAAC,KAAKP,KAAL,CAAWC,KAAZ,CAFR;AAGE,MAAA,MAAM,EAAE,KAAKD,KAAL,CAAWY,MAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,gBAOC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBARJ,CADF;AAaD;;AAvD2C","sourcesContent":["import React, { Component } from \"react\";\nimport Plot from \"react-plotly.js\";\n\nexport default class Graphs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: true,\n      revision: 0,\n      line1: {\n        x: this.props.coord.x,\n        y: this.props.coord.y, \n        name: 'Line 1',\n        mode: \"markers\",\n        type: \"scatter\",\n      },\n      layout: {\n        title: \"Title Loading\",\n        xaxis: {\n          type: \"date\",\n          //range: [],\n          //tickformat: '%H:%M'\n        },\n        //autosize: false,\n        //height: 300,\n      }\n    };\n  }\n\n  setData = () =>  {\n    var temp = {...this.state.line1}\n    temp.x = this.props.x;\n    this.setState({someProperty})\n\n\n    const { line1} = this.state;\n    line1.x = this.props.coord.x\n    line1.y = this.props.coord.y\n    this.setState({ \n      revision: this.state.revision + 1,\n\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        {this.state.response ? (\n          <Plot\n            revision={this.state.revision}\n            data={[this.state.line1]}\n            layout={this.state.layout}\n          />\n        ) : (\n          <p>Loading...</p>\n        )}\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}