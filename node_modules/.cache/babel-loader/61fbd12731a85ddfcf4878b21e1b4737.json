{"ast":null,"code":"var _jsxFileName = \"/Users/duc/Dropbox/Projects/Web/cryo-web-monitor/src/components/Graphs.js\";\nimport React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Plot from \"react-plotly.js\";\n\nclass Graphs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: false,\n      endpoint: \"localhost:5000\",\n      nrGraphs: 5,\n      data: [{\n        y: [],\n        x: [],\n        mode: \"markers\",\n        type: \"scatter\"\n      }],\n      layout: {\n        title: \"Graph 1\",\n        xaxis: {\n          type: \"date\",\n          range: ['2020-07-01', '2020-12-31'] //tickformat: '%H:%M'\n\n        } //autosize: false,\n        //height: 300,\n\n      },\n      frames: [],\n      config: {}\n    };\n  }\n\n  componentDidMount() {\n    const {\n      endpoint\n    } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"newData\", data => this.setState({\n      response: data\n    }));\n  }\n\n  render() {\n    const {\n      response\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }\n    }, response ? /*#__PURE__*/React.createElement(Plot, {\n      data: this.state.data,\n      layout: this.state.layout,\n      frames: this.state.frames,\n      config: this.state.config,\n      onInitialized: figure => this.setState(figure),\n      onUpdate: figure => this.setState(figure),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }) :\n    /*#__PURE__*/\n    //The temperature in Florence is: {response._mmsImageKey_Value} °F\n    React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }\n    }, \"Loading...\"));\n  }\n\n}\n\nexport default Graphs;","map":{"version":3,"sources":["/Users/duc/Dropbox/Projects/Web/cryo-web-monitor/src/components/Graphs.js"],"names":["React","Component","socketIOClient","Plot","Graphs","constructor","props","state","response","endpoint","nrGraphs","data","y","x","mode","type","layout","title","xaxis","range","frames","config","componentDidMount","socket","on","setState","render","figure"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,IAAP,MAAiB,iBAAjB;;AAEA,MAAMC,MAAN,SAAqBH,SAArB,CAA+B;AAC7BI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,KADC;AAEXC,MAAAA,QAAQ,EAAE,gBAFC;AAGXC,MAAAA,QAAQ,EAAE,CAHC;AAIXC,MAAAA,IAAI,EAAE,CACJ;AACEC,QAAAA,CAAC,EAAE,EADL;AAEEC,QAAAA,CAAC,EAAE,EAFL;AAGEC,QAAAA,IAAI,EAAE,SAHR;AAIEC,QAAAA,IAAI,EAAE;AAJR,OADI,CAJK;AAYXC,MAAAA,MAAM,EAAE;AACNC,QAAAA,KAAK,EAAE,SADD;AAENC,QAAAA,KAAK,EAAE;AACLH,UAAAA,IAAI,EAAE,MADD;AAELI,UAAAA,KAAK,EAAE,CAAC,YAAD,EAAe,YAAf,CAFF,CAGL;;AAHK,SAFD,CAON;AACA;;AARM,OAZG;AAsBXC,MAAAA,MAAM,EAAE,EAtBG;AAuBXC,MAAAA,MAAM,EAAE;AAvBG,KAAb;AAyBD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAM;AAAEb,MAAAA;AAAF,QAAe,KAAKF,KAA1B;AACA,UAAMgB,MAAM,GAAGrB,cAAc,CAACO,QAAD,CAA7B;AACAc,IAAAA,MAAM,CAACC,EAAP,CAAU,SAAV,EAAsBb,IAAD,IAAU,KAAKc,QAAL,CAAc;AAAEjB,MAAAA,QAAQ,EAAEG;AAAZ,KAAd,CAA/B;AACD;;AAEDe,EAAAA,MAAM,GAAG;AACP,UAAM;AAAElB,MAAAA;AAAF,QAAe,KAAKD,KAA1B;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGC,QAAQ,gBACP,oBAAC,IAAD;AACE,MAAA,IAAI,EAAE,KAAKD,KAAL,CAAWI,IADnB;AAEE,MAAA,MAAM,EAAE,KAAKJ,KAAL,CAAWS,MAFrB;AAGE,MAAA,MAAM,EAAE,KAAKT,KAAL,CAAWa,MAHrB;AAIE,MAAA,MAAM,EAAE,KAAKb,KAAL,CAAWc,MAJrB;AAKE,MAAA,aAAa,EAAGM,MAAD,IAAY,KAAKF,QAAL,CAAcE,MAAd,CAL7B;AAME,MAAA,QAAQ,EAAGA,MAAD,IAAY,KAAKF,QAAL,CAAcE,MAAd,CANxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADO;AAAA;AAUP;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAbJ,CADF;AAkBD;;AAxD4B;;AA2D/B,eAAevB,MAAf","sourcesContent":["import React, { Component } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport Plot from \"react-plotly.js\";\n\nclass Graphs extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      response: false,\n      endpoint: \"localhost:5000\",\n      nrGraphs: 5, \n      data: [\n        {\n          y: [],\n          x: [],\n          mode: \"markers\",\n          type: \"scatter\",\n        },\n      ],\n      layout: {\n        title: \"Graph 1\",\n        xaxis: {\n          type: \"date\",\n          range: ['2020-07-01', '2020-12-31'],\n          //tickformat: '%H:%M'\n        },\n        //autosize: false,\n        //height: 300,\n      },\n      frames: [],\n      config: {},\n    };\n  }\n\n  componentDidMount() {\n    const { endpoint } = this.state;\n    const socket = socketIOClient(endpoint);\n    socket.on(\"newData\", (data) => this.setState({ response: data }));\n  }\n\n  render() {\n    const { response } = this.state;\n    return (\n      <div>\n        {response ? (\n          <Plot\n            data={this.state.data}\n            layout={this.state.layout}\n            frames={this.state.frames}\n            config={this.state.config}\n            onInitialized={(figure) => this.setState(figure)}\n            onUpdate={(figure) => this.setState(figure)}\n          />\n        ) : (\n          //The temperature in Florence is: {response._mmsImageKey_Value} °F\n\n          <p>Loading...</p>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Graphs;\n"]},"metadata":{},"sourceType":"module"}